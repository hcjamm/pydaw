How to install:

	cd lms-filter  #or whatever plugin you want to install
	perl build.pl --full-build
	perl build.pl --install


How to generate a Makefile to be able to open the project in an IDE like Netbeans:

	cd lms-filter  #or whatever plugin you want to build
	perl build.pl --full-build


How to run a plugin standalone with console debugging:
	
	#You must first un-comment the defines for the debug mode you want to use
	#most are in synth.h, and look like this:
	#
	#	#define LMS_DEBUG_MAIN_LOOP
	#
	#You should comment them back out when releasing a plugin, as they waste a lot of CPU

	cd lms-filter  #or whatever plugin you want to build
	perl build.pl --debug

How to debug using GDB and an IDE:

	Create a project in your IDE of choice from the ./debugger/main.c and Makefile(LMS is developed in Netbeans, this functionality has not been tested in other IDEs).
	Create a project for the plugin you wish to debug if you haven't already done so.
	Set any breakpoints you wish to set.
	Begin debugging in your IDE.  Your IDE will allow you to stop at any of your breakpoints and examine the state of your plugin.


How to create .deb packages:
	
	Package all plugins in a single .deb(preferred):

	perl build-all.pl
	#answer a few questions
	

	Package a single plugin(be careful not to create conflicts with multi-plugin packages)

	cd lms-filter  #or whatever plugin you want to package
	perl build.pl --deb
	#answer questions

How to create .rpm packages:

	NOTE:  There is no option currently for packaging all plugins in a single RPM, however, it is planned for later.

	cd lms-filter  #or whatever plugin you want to package
	perl build.pl --rpm
	#answer questions

How to answer packaging questions:

	These are some typical answers.  Be careful, packaging fails without properly formatted information:

	0 -  Maintainer: [ "Jeff Hubbard" <jhubbard651@users.sf.net> ]
	1 -  Summary: [ LMS Comb is a comb filter(sometimes called a phaser or flanger) written using LibModSynth. ]
	2 -  Name:    [ lms-comb ]
	3 -  Version: [ 1.0.0 ]
	4 -  Release: [ 1 ]
	5 -  License: [ GPL ]
	6 -  Group:   [ checkinstall ]
	7 -  Architecture: [ amd64 ]
	8 -  Source location: [ lms-comb ]
	9 -  Alternate source location: [  ]
	10 - Requires: [ qjackctl ]
	11 - Provides: [ lms-comb ]
	12 - Conflicts: [  ]
	13 - Replaces: [  ]


How to fork a plugin automatically:

	Run this command in the directory of the plugin you want to fork:

	perl build.pl --fork

	, answer a few questions, and the script will copy the folder and update all meta-data and compiling information.

	If you're committing it to a git repository, you may want to run this command afterwards:

	perl build.pl --git-add

How to fork a plugin manually:

	Make a copy of the plugin folder you want to fork, place it in libmodsynth-git and rename it

	in <plugin>/src/meta.h , update the plugin information

	in <plugin>/src/Makefile.am , CTRL+F replace lms_filter with lms_comb (or whatever other names)

	update <plugin>/build.pl with the new plugin info

	run perl build.pl -f

	Delete any IDE specific folders like nbproject in your plugin folder

	Now you can load the project in your IDE

	The appropriate files can be added to git with:
	git add src/dssi.h src/libmodsynth.h src/Makefile.am src/synth.c src/synth.h src/synth_qt_gui.cpp src/meta.h src/synth_qt_gui.h build.pl Makefile.am configure.ac

How to debug by having the plugin write text to the console:

	In synth.h, there are multiple #defines that have been commented out, like:

	#define LMS_DEBUG_MAIN_LOOP

	If you uncomment them, you can print debug output defined in synth.c, etc... to the console.

How to debug in an IDE, or using gdb, etc...:

	You will need an ELF executable, use the one here:

	../jack-dssi-host/jack-dssi-host

	This will be built automatically the first time you run "perl build.pl --full-build" in any plugin folder.

OSC configure message keys/values:

key	value	notes

"ss"	file	Save song(file == file name)
"ns"	file	New song(file == file name)
"us"	file	Update Song(file==file name)
"ni"	file	New item(file==file name)
"ui"	file	Update an item(file==file name)
"di"	file	Delete item(file==file name)
"nr"	file	New region(file==file name)
"ur"	file	Update an region(file==file name)
"dr"	file	Delete region(file==file name)
"rr"	file|file	Rename a region (old file | new file)
"ri"	file|file	Rename an item (old file | new file)

Other TODO:
Create some kind of song->region dialog, like when clicking in a region in the song editor, prompt to make new or copy from another...  Create a region->item dialog to do the same...
Context menus?  Stuff like, insert, delete, etc...
Euphoria: Dynamically allocate per-sample data at sample load
Create a tabwidget for the main area, and move the item editor to a new tab.  Later I can add audio and MIDI event lists...
Move the with_osc variable to within the dssi_gui class;  Allow a dummy instance to be instantiated when no arguments are passed to the constructor

Project structure:

project/
	instruments/
		project.pss
		*.whatever-extension-i-gave-them
	regions/
		*.pyreg
	items/
		*.pyitem
	project.pysong
	


Move this to a document:


# The basic idea:  A non-linear DAW, since every other DAW on the planet is excessively linear.
# A song contains X number of 8 bar regions.  Regions contain items.  Items contain events.
# Events can be a MIDI note event, a MIDI CC event for automation, or playing back an audio file(?)
# The placement of an item with in a region determines what bar the item starts on in the song, but
# the bar itself has no defined length...  Which is how this becomes non-linear and uber...

/* -*- c-basic-offset: 4 -*-  vi:set ts=8 sts=4 sw=4: */

/* synth_qt_gui.h
 * 
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.   
*/

#ifndef _TRIVIAL_SAMPLER_QT_GUI_H_INCLUDED_
#define _TRIVIAL_SAMPLER_QT_GUI_H_INCLUDED_

#include <QFrame>
#include <QCheckBox>
#include <QSpinBox>
#include <QLabel>
#include <QSlider>
#include <QLayout>
#include <QMenuBar>
#include <QMenu>
#include <QAction>

#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtGui/QApplication>
#include <QtGui/QButtonGroup>
#include <QtGui/QComboBox>
#include <QtGui/QDial>
#include <QtGui/QGridLayout>
#include <QtGui/QGroupBox>
#include <QtGui/QHBoxLayout>
#include <QtGui/QHeaderView>
#include <QtGui/QLabel>
#include <QtGui/QLineEdit>
#include <QtGui/QMainWindow>
#include <QtGui/QPushButton>
#include <QtGui/QScrollArea>
#include <QtGui/QSlider>
#include <QtGui/QSpacerItem>
#include <QtGui/QSpinBox>
#include <QtGui/QTabWidget>
#include <QtGui/QTableWidget>
#include <QtGui/QVBoxLayout>
#include <QtGui/QWidget>
#include <QRadioButton>

//#include "../../libmodsynth/widgets/ui_modules/sample_viewer.h"
#include "../../libmodsynth/widgets/mod_matrix.h"
#include "../../libmodsynth/widgets/lms_file_select.h"
#include "ports.h"

extern "C" {
#include <lo/lo.h>
}

class SamplerGUI : public QFrame
{
    Q_OBJECT

public:
    SamplerGUI(bool stereo, const char * host, const char * port,
	       QByteArray controlPath, QByteArray midiPath, QByteArray programPath,
	       QByteArray exitingPath, QWidget *w = 0);
    virtual ~SamplerGUI();

    bool ready() const { return m_ready; }
    void setReady(bool ready) { m_ready = ready; }

    void setHostRequestedQuit(bool r) { m_hostRequestedQuit = r; }
    
    /*Moved here to be accessible by the control_handler*/
    LMS_mod_matrix * m_sample_table;    
    bool m_suppressHostUpdate;
    
    /*To prevent controls that update other controls from going berserk*/
    bool m_handle_control_updates;
    /*Setting this to true causes the moveSamplesToSingleDirectory() to use a tmp folder, and not 
     to reset the sample locations to the new folder*/
    bool m_creating_instrument_file;
    /*This is used when creating an instrument file*/
    QString m_inst_file_tmp_path;
    void calculate_fx_label(int,int,QLabel*);
public slots:
    void setSampleFile(QString file);
    void clearFile();
    void setSelection(int);
    void openInEditor();
    void reloadSample();
    void moveSamplesToSingleDirectory();
    void saveInstrumentToSingleFile();
    void openInstrumentFromFile();
    
    void aboutToQuit();

protected slots:
    void fileSelect();    
    void selectionChanged();   
    
    void oscRecv();
    
    /*synth_qt_gui.h Autogenerated slots*/

    void sample_pitch0Changed(int);
    void sample_pitch1Changed(int);
    void sample_pitch2Changed(int);
    void sample_pitch3Changed(int);
    void sample_pitch4Changed(int);
    void sample_pitch5Changed(int);
    void sample_pitch6Changed(int);
    void sample_pitch7Changed(int);
    void sample_pitch8Changed(int);
    void sample_pitch9Changed(int);
    void sample_pitch10Changed(int);
    void sample_pitch11Changed(int);
    void sample_pitch12Changed(int);
    void sample_pitch13Changed(int);
    void sample_pitch14Changed(int);
    void sample_pitch15Changed(int);
    void sample_pitch16Changed(int);
    void sample_pitch17Changed(int);
    void sample_pitch18Changed(int);
    void sample_pitch19Changed(int);
    void sample_pitch20Changed(int);
    void sample_pitch21Changed(int);
    void sample_pitch22Changed(int);
    void sample_pitch23Changed(int);
    void sample_pitch24Changed(int);
    void sample_pitch25Changed(int);
    void sample_pitch26Changed(int);
    void sample_pitch27Changed(int);
    void sample_pitch28Changed(int);
    void sample_pitch29Changed(int);
    void sample_pitch30Changed(int);
    void sample_pitch31Changed(int);
    void sample_lnote0Changed(int);
    void sample_lnote1Changed(int);
    void sample_lnote2Changed(int);
    void sample_lnote3Changed(int);
    void sample_lnote4Changed(int);
    void sample_lnote5Changed(int);
    void sample_lnote6Changed(int);
    void sample_lnote7Changed(int);
    void sample_lnote8Changed(int);
    void sample_lnote9Changed(int);
    void sample_lnote10Changed(int);
    void sample_lnote11Changed(int);
    void sample_lnote12Changed(int);
    void sample_lnote13Changed(int);
    void sample_lnote14Changed(int);
    void sample_lnote15Changed(int);
    void sample_lnote16Changed(int);
    void sample_lnote17Changed(int);
    void sample_lnote18Changed(int);
    void sample_lnote19Changed(int);
    void sample_lnote20Changed(int);
    void sample_lnote21Changed(int);
    void sample_lnote22Changed(int);
    void sample_lnote23Changed(int);
    void sample_lnote24Changed(int);
    void sample_lnote25Changed(int);
    void sample_lnote26Changed(int);
    void sample_lnote27Changed(int);
    void sample_lnote28Changed(int);
    void sample_lnote29Changed(int);
    void sample_lnote30Changed(int);
    void sample_lnote31Changed(int);
    void sample_hnote0Changed(int);
    void sample_hnote1Changed(int);
    void sample_hnote2Changed(int);
    void sample_hnote3Changed(int);
    void sample_hnote4Changed(int);
    void sample_hnote5Changed(int);
    void sample_hnote6Changed(int);
    void sample_hnote7Changed(int);
    void sample_hnote8Changed(int);
    void sample_hnote9Changed(int);
    void sample_hnote10Changed(int);
    void sample_hnote11Changed(int);
    void sample_hnote12Changed(int);
    void sample_hnote13Changed(int);
    void sample_hnote14Changed(int);
    void sample_hnote15Changed(int);
    void sample_hnote16Changed(int);
    void sample_hnote17Changed(int);
    void sample_hnote18Changed(int);
    void sample_hnote19Changed(int);
    void sample_hnote20Changed(int);
    void sample_hnote21Changed(int);
    void sample_hnote22Changed(int);
    void sample_hnote23Changed(int);
    void sample_hnote24Changed(int);
    void sample_hnote25Changed(int);
    void sample_hnote26Changed(int);
    void sample_hnote27Changed(int);
    void sample_hnote28Changed(int);
    void sample_hnote29Changed(int);
    void sample_hnote30Changed(int);
    void sample_hnote31Changed(int);
    void sample_vol0Changed(int);
    void sample_vol1Changed(int);
    void sample_vol2Changed(int);
    void sample_vol3Changed(int);
    void sample_vol4Changed(int);
    void sample_vol5Changed(int);
    void sample_vol6Changed(int);
    void sample_vol7Changed(int);
    void sample_vol8Changed(int);
    void sample_vol9Changed(int);
    void sample_vol10Changed(int);
    void sample_vol11Changed(int);
    void sample_vol12Changed(int);
    void sample_vol13Changed(int);
    void sample_vol14Changed(int);
    void sample_vol15Changed(int);
    void sample_vol16Changed(int);
    void sample_vol17Changed(int);
    void sample_vol18Changed(int);
    void sample_vol19Changed(int);
    void sample_vol20Changed(int);
    void sample_vol21Changed(int);
    void sample_vol22Changed(int);
    void sample_vol23Changed(int);
    void sample_vol24Changed(int);
    void sample_vol25Changed(int);
    void sample_vol26Changed(int);
    void sample_vol27Changed(int);
    void sample_vol28Changed(int);
    void sample_vol29Changed(int);
    void sample_vol30Changed(int);
    void sample_vol31Changed(int);

/*End synth_qt_gui.h Autogenerated slots*/

    

protected:
    
    void sample_pitchChanged(int);
    void sample_lnoteChanged(int);
    void sample_hnoteChanged(int);
    void sample_volChanged(int);
    /*The currently selected sample for viewing/editing */
    //int m_selected_sample_index;    
    /*The index of C, C#, D, D#, E, etc... in the QCombobox*/
    int m_note_indexes [LMS_MAX_SAMPLE_COUNT];
    
    QAction *actionMove_files_to_single_directory;
    QAction *actionSave_instrument_to_file;
    QAction *actionOpen_instrument_from_file;
    QMenuBar *menubar;
    QMenu *menuFile;
        
    //LMS_sample_viewer * m_sample_viewer;
    LMS_file_select * m_file_selector;
    
    QVBoxLayout *m_smp_tab_main_verticalLayout;
    QVBoxLayout *m_main_v_layout;
    QTabWidget *m_main_tab;
    QWidget *m_sample_tab;
    QHBoxLayout *horizontalLayout_2;
    QScrollArea *m_smp_tab_scrollArea;
    QWidget *m_smp_tab_scrollAreaWidgetContents;
    QHBoxLayout *horizontalLayout;
    QWidget *m_poly_fx_tab;
    QHBoxLayout *horizontalLayout_4;
    QVBoxLayout *m_poly_fx_vertical_layout;
    QHBoxLayout *m_poly_fx_Layout;
    
    lo_address m_host;
    QByteArray m_controlPath;
    QByteArray m_midiPath;
    QByteArray m_configurePath;
    QByteArray m_exitingPath;

    QString m_file;
    QString m_projectDir;
    int m_previewWidth;
    int m_previewHeight;

    bool m_hostRequestedQuit;
    bool m_ready;
};


#endif

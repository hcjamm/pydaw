/* -*- c-basic-offset: 4 -*-  vi:set ts=8 sts=4 sw=4: */

/* synth_qt_gui.cpp

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 */

#include "synth_qt_gui.h"

#include <QApplication>
#include <QDesktopWidget>
#include <QPushButton>
#include <QTimer>
#include <QFileDialog>
#include <QMessageBox>
#include <QPixmap>
#include <QPainter>
#include <QGroupBox>
#include <QTextStream>
#include <cstdlib>
#include <iostream>
#include <unistd.h>
#include <math.h>
#include <sndfile.h>

#include "dssi.h"

#ifdef Q_WS_X11
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xatom.h>
#include <X11/SM/SMlib.h>
#include <qt4/QtGui/qapplication.h>
#include <qt4/QtCore/qstring.h>

static int handle_x11_error(Display *dpy, XErrorEvent *err)
{
    char errstr[256];
    XGetErrorText(dpy, err->error_code, errstr, 256);
    if (err->error_code != BadWindow) {
	std::cerr << "trivial_sampler_qt_gui: X Error: "
		  << errstr << " " << err->error_code
		  << "\nin major opcode:  " << err->request_code << std::endl;
    }
    return 0;
}
#endif

/*This allows the executable to run standalone for debugging.  This should normally be commented out*/
//#define LMS_DEBUG_STANDALONE

using std::endl;

lo_server osc_server = 0;

static QTextStream cerr(stderr);

/*Used for outputting sampler parameters to text files*/
#define LMS_DELIMITER "|"

/*These define the index of each column in m_sample_table.  Re-order these if you add or remove columns*/
#define SMP_TB_RADIOBUTTON_INDEX 0
#define SMP_TB_FILE_PATH_INDEX 1
#define SMP_TB_NOTE_INDEX 2
#define SMP_TB_LOW_NOTE_INDEX 3
#define SMP_TB_HIGH_NOTE_INDEX 4
#define SMP_TB_VOLUME_INDEX 5

SamplerGUI::SamplerGUI(bool stereo, const char * host, const char * port,
		       QByteArray controlPath, QByteArray midiPath, QByteArray configurePath,
		       QByteArray exitingPath, QWidget *w) :
    QFrame(w),
    m_controlPath(controlPath),
    m_midiPath(midiPath),
    m_configurePath(configurePath),
    m_exitingPath(exitingPath),
    m_previewWidth(800),
    m_previewHeight(200),
    m_suppressHostUpdate(true),
    m_hostRequestedQuit(false),
    m_ready(false)
{   
    
#ifndef LMS_DEBUG_STANDALONE
    m_host = lo_address_new(host, port);
#endif    
    this->setStyleSheet("QGroupBox {background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #E0E0E0, stop: 1 #FFFFFF); border: 2px solid gray;  border-radius: 10px;  margin-top: 1ex; } QGroupBox::title { subcontrol-origin: margin; subcontrol-position: top center; padding: 0 3px; background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #FFOECE, stop: 1 #FFFFFF); }");
    
    m_handle_control_updates = true;
    
    LMS_style_info * a_style = new LMS_style_info(64);
    //a_style->LMS_set_value_style("")
        
    QList <LMS_mod_matrix_column*> f_sample_table_columns;
    
    f_sample_table_columns << new LMS_mod_matrix_column(radiobutton, QString(""), 0, 1, 0);  //Selected row
    f_sample_table_columns << new LMS_mod_matrix_column(no_widget, QString("Path"), 0, 1, 0);  //File path    
    f_sample_table_columns << new LMS_mod_matrix_column(note_selector, QString("Sample Pitch"), 0, 1, 3);  //Sample base pitch
    f_sample_table_columns << new LMS_mod_matrix_column(note_selector, QString("Low Note"), 0, 1, -2);  //Low Note
    f_sample_table_columns << new LMS_mod_matrix_column(note_selector, QString("High Note"), 0, 1, 8);  //High Note    
    f_sample_table_columns << new LMS_mod_matrix_column(spinbox, QString("Volume"), -50, 36, -6);  //Volume
           
    
    m_sample_table = new LMS_mod_matrix(this, LMS_MAX_SAMPLE_COUNT, f_sample_table_columns, LMS_FIRST_MOD_MATRIX_PORT, a_style);
    
    m_file_selector = new LMS_file_select(this);
    
        /*Set all of the array variables that are per-sample*/
        for(int i = 0; i < LMS_MAX_SAMPLE_COUNT; i++)        
        {           
            QRadioButton * f_rb = (QRadioButton*)m_sample_table->lms_mod_matrix->cellWidget(i , SMP_TB_RADIOBUTTON_INDEX);            
            connect(f_rb, SIGNAL(clicked()), this, SLOT(selectionChanged()));
            
            m_note_indexes[i] = 0;                 
        }
        
        /*Code generated by Qt4 Designer*/
    
        actionMove_files_to_single_directory = new QAction(this);
        actionMove_files_to_single_directory->setObjectName(QString::fromUtf8("actionMove_files_to_single_directory"));
        actionSave_instrument_to_file = new QAction(this);
        actionSave_instrument_to_file->setObjectName(QString::fromUtf8("actionSave_instrument_to_file"));
        actionOpen_instrument_from_file = new QAction(this);
        actionOpen_instrument_from_file->setObjectName(QString::fromUtf8("actionOpen_instrument_from_file"));
        
        menubar = new QMenuBar(this);
        menubar->setObjectName(QString::fromUtf8("menubar"));
        menubar->setGeometry(QRect(0, 0, 800, 25));
        menuFile = new QMenu(menubar);
        menuFile->setObjectName(QString::fromUtf8("menuFile"));        
        menubar->addAction(menuFile->menuAction());
        menuFile->addAction(actionMove_files_to_single_directory);
        menuFile->addAction(actionSave_instrument_to_file);
        menuFile->addAction(actionOpen_instrument_from_file);
        
        actionMove_files_to_single_directory->setText(QApplication::translate("MainWindow", "Move files to single directory", 0, QApplication::UnicodeUTF8));
        actionSave_instrument_to_file->setText(QApplication::translate("MainWindow", "Save instrument to file", 0, QApplication::UnicodeUTF8));
        actionOpen_instrument_from_file->setText(QApplication::translate("MainWindow", "Open instrument from file", 0, QApplication::UnicodeUTF8));
        menuFile->setTitle(QApplication::translate("MainWindow", "Menu", 0, QApplication::UnicodeUTF8));
        
        if (this->objectName().isEmpty())
        this->setObjectName(QString::fromUtf8("Frame"));
        this->resize(1024, 800);
        QSizePolicy sizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
        sizePolicy.setHorizontalStretch(0);
        sizePolicy.setVerticalStretch(0);
        sizePolicy.setHeightForWidth(this->sizePolicy().hasHeightForWidth());
        this->setSizePolicy(sizePolicy);
        this->setFrameShape(QFrame::StyledPanel);
        this->setFrameShadow(QFrame::Raised);
        
        m_smp_tab_main_verticalLayout = new QVBoxLayout();
        m_smp_tab_main_verticalLayout->setObjectName(QString::fromUtf8("m_smp_tab_main_verticalLayout"));
        
        m_main_v_layout = new QVBoxLayout(this);
        m_main_v_layout->setObjectName(QString::fromUtf8("m_main_v_layout"));
        m_main_v_layout->addWidget(menubar);
        m_main_tab = new QTabWidget(this);
        m_main_tab->setObjectName(QString::fromUtf8("m_main_tab"));
        m_main_tab->setStyleSheet(QString::fromUtf8(""));
        m_sample_tab = new QWidget();
        m_sample_tab->setObjectName(QString::fromUtf8("m_sample_tab"));
        horizontalLayout_2 = new QHBoxLayout(m_sample_tab);
        horizontalLayout_2->setObjectName(QString::fromUtf8("horizontalLayout_2"));
        m_smp_tab_scrollArea = new QScrollArea(m_sample_tab);
        m_smp_tab_scrollArea->setObjectName(QString::fromUtf8("m_smp_tab_scrollArea"));
        m_smp_tab_scrollArea->setStyleSheet(QString::fromUtf8(""));
        m_smp_tab_scrollArea->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOn);
        m_smp_tab_scrollArea->setHorizontalScrollBarPolicy(Qt::ScrollBarAsNeeded);
        m_smp_tab_scrollArea->setWidgetResizable(true);
        m_smp_tab_scrollAreaWidgetContents = new QWidget();
        m_smp_tab_scrollAreaWidgetContents->setObjectName(QString::fromUtf8("m_smp_tab_scrollAreaWidgetContents"));
        m_smp_tab_scrollAreaWidgetContents->setGeometry(QRect(0, 0, 966, 728));
        horizontalLayout = new QHBoxLayout(m_smp_tab_scrollAreaWidgetContents);
        horizontalLayout->setObjectName(QString::fromUtf8("horizontalLayout"));

        //m_smp_tab_main_verticalLayout->addLayout(m_loop_start_end_Layout);
        m_smp_tab_main_verticalLayout->addWidget(m_sample_table->lms_mod_matrix, Qt::AlignCenter); 
        m_smp_tab_main_verticalLayout->addLayout(m_file_selector->lms_layout);
        
        horizontalLayout->addLayout(m_smp_tab_main_verticalLayout);

        m_smp_tab_scrollArea->setWidget(m_smp_tab_scrollAreaWidgetContents);

        horizontalLayout_2->addWidget(m_smp_tab_scrollArea);

        m_main_tab->addTab(m_sample_tab, QString());
        m_poly_fx_tab = new QWidget();
        m_poly_fx_tab->setObjectName(QString::fromUtf8("m_poly_fx_tab"));
        horizontalLayout_4 = new QHBoxLayout(m_poly_fx_tab);
        horizontalLayout_4->setObjectName(QString::fromUtf8("horizontalLayout_4"));
        m_poly_fx_vertical_layout = new QVBoxLayout();
        m_poly_fx_vertical_layout->setObjectName(QString::fromUtf8("m_poly_fx_vertical_layout"));
        m_poly_fx_Layout = new QHBoxLayout();
        m_poly_fx_Layout->setObjectName(QString::fromUtf8("m_poly_fx_Layout"));

        m_poly_fx_vertical_layout->addLayout(m_poly_fx_Layout);

        horizontalLayout_4->addLayout(m_poly_fx_vertical_layout);

        //m_main_tab->addTab(m_poly_fx_tab, QString());

        m_main_v_layout->addWidget(m_main_tab);
        
        this->setWindowTitle(QApplication::translate("Frame", "Euphoria - Powered by LibModSynth", 0, QApplication::UnicodeUTF8));
        m_main_tab->setTabText(m_main_tab->indexOf(m_sample_tab), QApplication::translate("Frame", "Samples", 0, QApplication::UnicodeUTF8));
        m_main_tab->setTabText(m_main_tab->indexOf(m_poly_fx_tab), QApplication::translate("Frame", "Poly FX", 0, QApplication::UnicodeUTF8));

        m_main_tab->setCurrentIndex(0);

        m_sample_table->lms_mod_matrix->resizeColumnsToContents();
        m_sample_table->lms_mod_matrix->resizeRowsToContents();
        
        QMetaObject::connectSlotsByName(this);
    
        /*Connect slots manually*/
        connect(m_file_selector->lms_open_button, SIGNAL(pressed()), this, SLOT(fileSelect()));
        connect(m_file_selector->lms_clear_button, SIGNAL(pressed()), this, SLOT(clearFile()));
        connect(m_file_selector->lms_open_in_editor_button, SIGNAL(pressed()), this, SLOT(openInEditor()));
        connect(m_file_selector->lms_reload_button, SIGNAL(pressed()), this, SLOT(reloadSample()));
        connect(actionMove_files_to_single_directory, SIGNAL(triggered()), this, SLOT(moveSamplesToSingleDirectory()));
        connect(actionSave_instrument_to_file, SIGNAL(triggered()), this, SLOT(saveInstrumentToSingleFile()));
        connect(actionOpen_instrument_from_file, SIGNAL(triggered()), this, SLOT(openInstrumentFromFile()));
        
        /*synth_qt_gui.cpp Autogenerated connections*/
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[0]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch0Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[0]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch0Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[1]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch1Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[1]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch1Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[2]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch2Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[2]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch2Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[3]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch3Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[3]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch3Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[4]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch4Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[4]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch4Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[5]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch5Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[5]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch5Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[6]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch6Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[6]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch6Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[7]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch7Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[7]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch7Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[8]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch8Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[8]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch8Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[9]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch9Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[9]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch9Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[10]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch10Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[10]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch10Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[11]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch11Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[11]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch11Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[12]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch12Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[12]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch12Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[13]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch13Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[13]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch13Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[14]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch14Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[14]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch14Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[15]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch15Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[15]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch15Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[16]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch16Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[16]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch16Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[17]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch17Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[17]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch17Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[18]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch18Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[18]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch18Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[19]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch19Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[19]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch19Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[20]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch20Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[20]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch20Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[21]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch21Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[21]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch21Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[22]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch22Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[22]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch22Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[23]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch23Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[23]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch23Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[24]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch24Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[24]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch24Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[25]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch25Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[25]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch25Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[26]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch26Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[26]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch26Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[27]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch27Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[27]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch27Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[28]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch28Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[28]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch28Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[29]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch29Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[29]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch29Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[30]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch30Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[30]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch30Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[31]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_pitch31Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[31]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_pitch31Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[0]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote0Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[0]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote0Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[1]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote1Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[1]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote1Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[2]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote2Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[2]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote2Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[3]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote3Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[3]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote3Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[4]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote4Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[4]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote4Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[5]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote5Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[5]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote5Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[6]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote6Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[6]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote6Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[7]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote7Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[7]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote7Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[8]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote8Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[8]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote8Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[9]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote9Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[9]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote9Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[10]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote10Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[10]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote10Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[11]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote11Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[11]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote11Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[12]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote12Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[12]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote12Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[13]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote13Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[13]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote13Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[14]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote14Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[14]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote14Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[15]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote15Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[15]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote15Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[16]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote16Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[16]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote16Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[17]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote17Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[17]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote17Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[18]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote18Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[18]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote18Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[19]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote19Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[19]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote19Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[20]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote20Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[20]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote20Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[21]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote21Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[21]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote21Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[22]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote22Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[22]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote22Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[23]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote23Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[23]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote23Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[24]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote24Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[24]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote24Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[25]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote25Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[25]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote25Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[26]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote26Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[26]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote26Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[27]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote27Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[27]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote27Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[28]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote28Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[28]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote28Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[29]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote29Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[29]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote29Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[30]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote30Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[30]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote30Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[31]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_lnote31Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[31]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_lnote31Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[0]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote0Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[0]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote0Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[1]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote1Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[1]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote1Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[2]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote2Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[2]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote2Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[3]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote3Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[3]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote3Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[4]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote4Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[4]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote4Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[5]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote5Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[5]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote5Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[6]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote6Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[6]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote6Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[7]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote7Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[7]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote7Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[8]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote8Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[8]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote8Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[9]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote9Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[9]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote9Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[10]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote10Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[10]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote10Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[11]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote11Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[11]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote11Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[12]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote12Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[12]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote12Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[13]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote13Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[13]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote13Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[14]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote14Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[14]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote14Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[15]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote15Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[15]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote15Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[16]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote16Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[16]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote16Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[17]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote17Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[17]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote17Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[18]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote18Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[18]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote18Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[19]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote19Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[19]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote19Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[20]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote20Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[20]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote20Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[21]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote21Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[21]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote21Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[22]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote22Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[22]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote22Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[23]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote23Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[23]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote23Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[24]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote24Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[24]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote24Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[25]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote25Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[25]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote25Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[26]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote26Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[26]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote26Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[27]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote27Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[27]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote27Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[28]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote28Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[28]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote28Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[29]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote29Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[29]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote29Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[30]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote30Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[30]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote30Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[31]))->lms_note, SIGNAL(currentIndexChanged(int)), this, SLOT(sample_hnote31Changed(int)));
        connect(((LMS_note_selector*)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[31]))->lms_octave, SIGNAL(valueChanged(int)), this, SLOT(sample_hnote31Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[0]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol0Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[1]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol1Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[2]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol2Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[3]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol3Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[4]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol4Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[5]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol5Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[6]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol6Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[7]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol7Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[8]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol8Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[9]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol9Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[10]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol10Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[11]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol11Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[12]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol12Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[13]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol13Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[14]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol14Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[15]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol15Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[16]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol16Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[17]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol17Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[18]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol18Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[19]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol19Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[20]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol20Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[21]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol21Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[22]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol22Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[23]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol23Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[24]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol24Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[25]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol25Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[26]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol26Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[27]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol27Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[28]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol28Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[29]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol29Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[30]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol30Changed(int)));
        connect((QSpinBox*)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[31]->lms_get_widget()), SIGNAL(valueChanged(int)), this, SLOT(sample_vol31Changed(int)));
        
/*End synth_qt_gui.cpp Autogenerated connections*/
        
    QTimer *myTimer = new QTimer(this);
    connect(myTimer, SIGNAL(timeout()), this, SLOT(oscRecv()));
    myTimer->setSingleShot(false);
    myTimer->start(0);

    m_suppressHostUpdate = false;
}

void SamplerGUI::setSampleFile(QString file)
{
    m_suppressHostUpdate = true;
        
    m_file = file;
            
    m_sample_table->lms_mod_matrix->resizeColumnsToContents();
    
    m_suppressHostUpdate = false;
}

void SamplerGUI::setSelection(int a_value)
{
    m_suppressHostUpdate = true;
    //m_selected_sample[a_value]->setChecked(true);
    m_suppressHostUpdate = false;
}


void SamplerGUI::fileSelect()
{
    QString orig = m_file;
    if (orig.isEmpty()) {
	if (!m_projectDir.isEmpty()) {
	    orig = m_projectDir;
	} else {
	    orig = ".";
	}
    }
    
    QString path = m_file_selector->open_button_pressed(this);
    
    if(!path.isEmpty())
    {
        m_sample_table->find_selected_radio_button(SMP_TB_RADIOBUTTON_INDEX);
#ifndef LMS_DEBUG_STANDALONE
        lo_send(m_host, m_configurePath, "ss", "load", path.toLocal8Bit().data());
#endif
                
        QTableWidgetItem * f_item = new QTableWidgetItem();
        f_item->setText(path);
        f_item->setFlags(Qt::ItemIsSelectable|Qt::ItemIsEnabled);
        m_sample_table->lms_mod_matrix->setItem(m_sample_table->lms_selected_column, SMP_TB_FILE_PATH_INDEX, f_item);
        m_sample_table->lms_mod_matrix->resizeColumnsToContents();
    }

}

void SamplerGUI::clearFile()
{ 
    m_sample_table->find_selected_radio_button(SMP_TB_RADIOBUTTON_INDEX);
    
    QString path = QString("");
    
#ifndef LMS_DEBUG_STANDALONE
        lo_send(m_host, m_configurePath, "ss", "clear", path.toLocal8Bit().data());
#endif
    
    QTableWidgetItem * f_item = new QTableWidgetItem();
    f_item->setText(path);
    f_item->setFlags(Qt::ItemIsSelectable|Qt::ItemIsEnabled);
    m_sample_table->lms_mod_matrix->setItem(m_sample_table->lms_selected_column, SMP_TB_FILE_PATH_INDEX, f_item);
    m_file_selector->clear_button_pressed();
}

void SamplerGUI::openInEditor()
{
    m_file_selector->open_in_editor_button_pressed(this);
}

void SamplerGUI::reloadSample()
{
    QString path = m_file_selector->lms_file_path->text();
    
    if(!path.isEmpty())
    {
        m_sample_table->find_selected_radio_button(SMP_TB_RADIOBUTTON_INDEX);
#ifndef LMS_DEBUG_STANDALONE
        lo_send(m_host, m_configurePath, "ss", "load", path.toLocal8Bit().data());
#endif                
    }
}

void SamplerGUI::selectionChanged()
{
    m_sample_table->find_selected_radio_button(SMP_TB_RADIOBUTTON_INDEX);    
#ifndef LMS_DEBUG_STANDALONE
    if (!m_suppressHostUpdate) {        
	lo_send(m_host, m_controlPath, "if", Sampler_SELECTED_SAMPLE, (float)(m_sample_table->lms_selected_column));
    }
#endif    
    
    m_file_selector->lms_set_file(m_sample_table->lms_mod_matrix->item(m_sample_table->lms_selected_column, SMP_TB_FILE_PATH_INDEX)->text());
    
}

void SamplerGUI::sample_pitchChanged(int a_control_index)
{
    m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[a_control_index]->lms_value_changed(0);
#ifndef LMS_DEBUG_STANDALONE
    if (!m_suppressHostUpdate) {        
	lo_send(m_host, m_controlPath, "if",                 
                (m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[a_control_index]->lms_port), 
                (float)(m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[a_control_index]->lms_get_value()));
    }
#endif    
}

void SamplerGUI::sample_lnoteChanged(int a_control_index)
{
    m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[a_control_index]->lms_value_changed(0);
#ifndef LMS_DEBUG_STANDALONE
    if (!m_suppressHostUpdate) {        
	lo_send(m_host, m_controlPath, "if",                 
                (m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[a_control_index]->lms_port), 
                (float)(m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[a_control_index]->lms_get_value()));
    }
#endif    
    
}
void SamplerGUI::sample_hnoteChanged(int a_control_index)
{
    m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[a_control_index]->lms_value_changed(0);
#ifndef LMS_DEBUG_STANDALONE
    if (!m_suppressHostUpdate) {        
	lo_send(m_host, m_controlPath, "if",                 
                (m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[a_control_index]->lms_port), 
                (float)(m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[a_control_index]->lms_get_value()));
    }
#endif    
    
}

void SamplerGUI::sample_volChanged(int a_control_index)
{
    m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[a_control_index]->lms_value_changed(0);
#ifndef LMS_DEBUG_STANDALONE
    if (!m_suppressHostUpdate) {        
	lo_send(m_host, m_controlPath, "if",                 
                (m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[a_control_index]->lms_port), 
                (float)(m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[a_control_index]->lms_get_value()));
    }
#endif    
    
}

void SamplerGUI::saveInstrumentToSingleFile()
{       
    QString f_selected_path = QFileDialog::getSaveFileName(this, "Select an file to save the instrument to...", ".", "Euphoria Instrument Files (*.u4ia)");
    
    if(!f_selected_path.isEmpty())
    {
        //TODO:  some obligatory sanity checks
        
        QFile file( f_selected_path );
        if ( file.open(QIODevice::ReadWrite) )
        {
            QTextStream stream( &file );
            stream << "#Some meta-data about the file...\n";
            for(int i = 0; i < LMS_MAX_SAMPLE_COUNT; i++)        
            {           
                //TODO:  This is wrong, the files need to be copied to a central location and use only file name, not full path
                stream << i << LMS_DELIMITER << m_sample_table->lms_mod_matrix->item(i, SMP_TB_FILE_PATH_INDEX)->text() << "\n";                
            }
            
            stream << "\n#Suggested common parameters for .u4ia compliant samplers to implement\n";
            
            //TODO:  parameters for the instrument
            
            stream << "\n#Optional parameters for .u4ia compliant samplers to implement\n";
        }        
    }
}

void SamplerGUI::moveSamplesToSingleDirectory()
{
    QString f_selected_path = QFileDialog::getExistingDirectory(this, "Select a directory to move the samples to...", ".");
    
    //TODO:  check that the directory is empty...
    
    for(int i = 0; i < LMS_MAX_SAMPLE_COUNT; i++)        
    {           
        if(!(m_sample_table->lms_mod_matrix->item(i, SMP_TB_FILE_PATH_INDEX)->text().startsWith(f_selected_path, Qt::CaseInsensitive)));
        {
            /*  TODO:  Note the current selected radio button, then programmatically select each one that changes, then 
             * reselect the original button.  Use the below to send to the DSSI engine...
             if(!path.isEmpty())
                {
                    m_sample_table->find_selected_radio_button(SMP_TB_RADIOBUTTON_INDEX);
            #ifndef LMS_DEBUG_STANDALONE
                    lo_send(m_host, m_configurePath, "ss", "load", path.toLocal8Bit().data());
            #endif                
                }
             */
        }
    }
}

void SamplerGUI::openInstrumentFromFile()
{
    QString f_selected_path = QFileDialog::getOpenFileName(this, "Select an instrument file to open...", ".", "Euphoria Instrument Files (*.u4ia)");    
}

/*synth_qt_gui.cpp Autogenerated slots*/

void SamplerGUI::sample_pitch0Changed(int a_value){sample_pitchChanged(0);}
void SamplerGUI::sample_pitch1Changed(int a_value){sample_pitchChanged(1);}
void SamplerGUI::sample_pitch2Changed(int a_value){sample_pitchChanged(2);}
void SamplerGUI::sample_pitch3Changed(int a_value){sample_pitchChanged(3);}
void SamplerGUI::sample_pitch4Changed(int a_value){sample_pitchChanged(4);}
void SamplerGUI::sample_pitch5Changed(int a_value){sample_pitchChanged(5);}
void SamplerGUI::sample_pitch6Changed(int a_value){sample_pitchChanged(6);}
void SamplerGUI::sample_pitch7Changed(int a_value){sample_pitchChanged(7);}
void SamplerGUI::sample_pitch8Changed(int a_value){sample_pitchChanged(8);}
void SamplerGUI::sample_pitch9Changed(int a_value){sample_pitchChanged(9);}
void SamplerGUI::sample_pitch10Changed(int a_value){sample_pitchChanged(10);}
void SamplerGUI::sample_pitch11Changed(int a_value){sample_pitchChanged(11);}
void SamplerGUI::sample_pitch12Changed(int a_value){sample_pitchChanged(12);}
void SamplerGUI::sample_pitch13Changed(int a_value){sample_pitchChanged(13);}
void SamplerGUI::sample_pitch14Changed(int a_value){sample_pitchChanged(14);}
void SamplerGUI::sample_pitch15Changed(int a_value){sample_pitchChanged(15);}
void SamplerGUI::sample_pitch16Changed(int a_value){sample_pitchChanged(16);}
void SamplerGUI::sample_pitch17Changed(int a_value){sample_pitchChanged(17);}
void SamplerGUI::sample_pitch18Changed(int a_value){sample_pitchChanged(18);}
void SamplerGUI::sample_pitch19Changed(int a_value){sample_pitchChanged(19);}
void SamplerGUI::sample_pitch20Changed(int a_value){sample_pitchChanged(20);}
void SamplerGUI::sample_pitch21Changed(int a_value){sample_pitchChanged(21);}
void SamplerGUI::sample_pitch22Changed(int a_value){sample_pitchChanged(22);}
void SamplerGUI::sample_pitch23Changed(int a_value){sample_pitchChanged(23);}
void SamplerGUI::sample_pitch24Changed(int a_value){sample_pitchChanged(24);}
void SamplerGUI::sample_pitch25Changed(int a_value){sample_pitchChanged(25);}
void SamplerGUI::sample_pitch26Changed(int a_value){sample_pitchChanged(26);}
void SamplerGUI::sample_pitch27Changed(int a_value){sample_pitchChanged(27);}
void SamplerGUI::sample_pitch28Changed(int a_value){sample_pitchChanged(28);}
void SamplerGUI::sample_pitch29Changed(int a_value){sample_pitchChanged(29);}
void SamplerGUI::sample_pitch30Changed(int a_value){sample_pitchChanged(30);}
void SamplerGUI::sample_pitch31Changed(int a_value){sample_pitchChanged(31);}
void SamplerGUI::sample_lnote0Changed(int a_value){sample_lnoteChanged(0);}
void SamplerGUI::sample_lnote1Changed(int a_value){sample_lnoteChanged(1);}
void SamplerGUI::sample_lnote2Changed(int a_value){sample_lnoteChanged(2);}
void SamplerGUI::sample_lnote3Changed(int a_value){sample_lnoteChanged(3);}
void SamplerGUI::sample_lnote4Changed(int a_value){sample_lnoteChanged(4);}
void SamplerGUI::sample_lnote5Changed(int a_value){sample_lnoteChanged(5);}
void SamplerGUI::sample_lnote6Changed(int a_value){sample_lnoteChanged(6);}
void SamplerGUI::sample_lnote7Changed(int a_value){sample_lnoteChanged(7);}
void SamplerGUI::sample_lnote8Changed(int a_value){sample_lnoteChanged(8);}
void SamplerGUI::sample_lnote9Changed(int a_value){sample_lnoteChanged(9);}
void SamplerGUI::sample_lnote10Changed(int a_value){sample_lnoteChanged(10);}
void SamplerGUI::sample_lnote11Changed(int a_value){sample_lnoteChanged(11);}
void SamplerGUI::sample_lnote12Changed(int a_value){sample_lnoteChanged(12);}
void SamplerGUI::sample_lnote13Changed(int a_value){sample_lnoteChanged(13);}
void SamplerGUI::sample_lnote14Changed(int a_value){sample_lnoteChanged(14);}
void SamplerGUI::sample_lnote15Changed(int a_value){sample_lnoteChanged(15);}
void SamplerGUI::sample_lnote16Changed(int a_value){sample_lnoteChanged(16);}
void SamplerGUI::sample_lnote17Changed(int a_value){sample_lnoteChanged(17);}
void SamplerGUI::sample_lnote18Changed(int a_value){sample_lnoteChanged(18);}
void SamplerGUI::sample_lnote19Changed(int a_value){sample_lnoteChanged(19);}
void SamplerGUI::sample_lnote20Changed(int a_value){sample_lnoteChanged(20);}
void SamplerGUI::sample_lnote21Changed(int a_value){sample_lnoteChanged(21);}
void SamplerGUI::sample_lnote22Changed(int a_value){sample_lnoteChanged(22);}
void SamplerGUI::sample_lnote23Changed(int a_value){sample_lnoteChanged(23);}
void SamplerGUI::sample_lnote24Changed(int a_value){sample_lnoteChanged(24);}
void SamplerGUI::sample_lnote25Changed(int a_value){sample_lnoteChanged(25);}
void SamplerGUI::sample_lnote26Changed(int a_value){sample_lnoteChanged(26);}
void SamplerGUI::sample_lnote27Changed(int a_value){sample_lnoteChanged(27);}
void SamplerGUI::sample_lnote28Changed(int a_value){sample_lnoteChanged(28);}
void SamplerGUI::sample_lnote29Changed(int a_value){sample_lnoteChanged(29);}
void SamplerGUI::sample_lnote30Changed(int a_value){sample_lnoteChanged(30);}
void SamplerGUI::sample_lnote31Changed(int a_value){sample_lnoteChanged(31);}
void SamplerGUI::sample_hnote0Changed(int a_value){sample_hnoteChanged(0);}
void SamplerGUI::sample_hnote1Changed(int a_value){sample_hnoteChanged(1);}
void SamplerGUI::sample_hnote2Changed(int a_value){sample_hnoteChanged(2);}
void SamplerGUI::sample_hnote3Changed(int a_value){sample_hnoteChanged(3);}
void SamplerGUI::sample_hnote4Changed(int a_value){sample_hnoteChanged(4);}
void SamplerGUI::sample_hnote5Changed(int a_value){sample_hnoteChanged(5);}
void SamplerGUI::sample_hnote6Changed(int a_value){sample_hnoteChanged(6);}
void SamplerGUI::sample_hnote7Changed(int a_value){sample_hnoteChanged(7);}
void SamplerGUI::sample_hnote8Changed(int a_value){sample_hnoteChanged(8);}
void SamplerGUI::sample_hnote9Changed(int a_value){sample_hnoteChanged(9);}
void SamplerGUI::sample_hnote10Changed(int a_value){sample_hnoteChanged(10);}
void SamplerGUI::sample_hnote11Changed(int a_value){sample_hnoteChanged(11);}
void SamplerGUI::sample_hnote12Changed(int a_value){sample_hnoteChanged(12);}
void SamplerGUI::sample_hnote13Changed(int a_value){sample_hnoteChanged(13);}
void SamplerGUI::sample_hnote14Changed(int a_value){sample_hnoteChanged(14);}
void SamplerGUI::sample_hnote15Changed(int a_value){sample_hnoteChanged(15);}
void SamplerGUI::sample_hnote16Changed(int a_value){sample_hnoteChanged(16);}
void SamplerGUI::sample_hnote17Changed(int a_value){sample_hnoteChanged(17);}
void SamplerGUI::sample_hnote18Changed(int a_value){sample_hnoteChanged(18);}
void SamplerGUI::sample_hnote19Changed(int a_value){sample_hnoteChanged(19);}
void SamplerGUI::sample_hnote20Changed(int a_value){sample_hnoteChanged(20);}
void SamplerGUI::sample_hnote21Changed(int a_value){sample_hnoteChanged(21);}
void SamplerGUI::sample_hnote22Changed(int a_value){sample_hnoteChanged(22);}
void SamplerGUI::sample_hnote23Changed(int a_value){sample_hnoteChanged(23);}
void SamplerGUI::sample_hnote24Changed(int a_value){sample_hnoteChanged(24);}
void SamplerGUI::sample_hnote25Changed(int a_value){sample_hnoteChanged(25);}
void SamplerGUI::sample_hnote26Changed(int a_value){sample_hnoteChanged(26);}
void SamplerGUI::sample_hnote27Changed(int a_value){sample_hnoteChanged(27);}
void SamplerGUI::sample_hnote28Changed(int a_value){sample_hnoteChanged(28);}
void SamplerGUI::sample_hnote29Changed(int a_value){sample_hnoteChanged(29);}
void SamplerGUI::sample_hnote30Changed(int a_value){sample_hnoteChanged(30);}
void SamplerGUI::sample_hnote31Changed(int a_value){sample_hnoteChanged(31);}
void SamplerGUI::sample_vol0Changed(int a_value){sample_volChanged(0);}
void SamplerGUI::sample_vol1Changed(int a_value){sample_volChanged(1);}
void SamplerGUI::sample_vol2Changed(int a_value){sample_volChanged(2);}
void SamplerGUI::sample_vol3Changed(int a_value){sample_volChanged(3);}
void SamplerGUI::sample_vol4Changed(int a_value){sample_volChanged(4);}
void SamplerGUI::sample_vol5Changed(int a_value){sample_volChanged(5);}
void SamplerGUI::sample_vol6Changed(int a_value){sample_volChanged(6);}
void SamplerGUI::sample_vol7Changed(int a_value){sample_volChanged(7);}
void SamplerGUI::sample_vol8Changed(int a_value){sample_volChanged(8);}
void SamplerGUI::sample_vol9Changed(int a_value){sample_volChanged(9);}
void SamplerGUI::sample_vol10Changed(int a_value){sample_volChanged(10);}
void SamplerGUI::sample_vol11Changed(int a_value){sample_volChanged(11);}
void SamplerGUI::sample_vol12Changed(int a_value){sample_volChanged(12);}
void SamplerGUI::sample_vol13Changed(int a_value){sample_volChanged(13);}
void SamplerGUI::sample_vol14Changed(int a_value){sample_volChanged(14);}
void SamplerGUI::sample_vol15Changed(int a_value){sample_volChanged(15);}
void SamplerGUI::sample_vol16Changed(int a_value){sample_volChanged(16);}
void SamplerGUI::sample_vol17Changed(int a_value){sample_volChanged(17);}
void SamplerGUI::sample_vol18Changed(int a_value){sample_volChanged(18);}
void SamplerGUI::sample_vol19Changed(int a_value){sample_volChanged(19);}
void SamplerGUI::sample_vol20Changed(int a_value){sample_volChanged(20);}
void SamplerGUI::sample_vol21Changed(int a_value){sample_volChanged(21);}
void SamplerGUI::sample_vol22Changed(int a_value){sample_volChanged(22);}
void SamplerGUI::sample_vol23Changed(int a_value){sample_volChanged(23);}
void SamplerGUI::sample_vol24Changed(int a_value){sample_volChanged(24);}
void SamplerGUI::sample_vol25Changed(int a_value){sample_volChanged(25);}
void SamplerGUI::sample_vol26Changed(int a_value){sample_volChanged(26);}
void SamplerGUI::sample_vol27Changed(int a_value){sample_volChanged(27);}
void SamplerGUI::sample_vol28Changed(int a_value){sample_volChanged(28);}
void SamplerGUI::sample_vol29Changed(int a_value){sample_volChanged(29);}
void SamplerGUI::sample_vol30Changed(int a_value){sample_volChanged(30);}
void SamplerGUI::sample_vol31Changed(int a_value){sample_volChanged(31);}

/*End synth_qt_gui.cpp Autogenerated slots*/

void
SamplerGUI::oscRecv()
{
#ifndef LMS_DEBUG_STANDALONE
    if (osc_server) {
	lo_server_recv_noblock(osc_server, 1);
    }
#endif
}

void
SamplerGUI::aboutToQuit()
{
#ifndef LMS_DEBUG_STANDALONE
    if (!m_hostRequestedQuit) lo_send(m_host, m_exitingPath, "");
#endif
}

SamplerGUI::~SamplerGUI()
{
#ifndef LMS_DEBUG_STANDALONE
    lo_address_free(m_host);
#endif
}


void osc_error(int num, const char *msg, const char *path)
{
    cerr << "Error: liblo server error " << num
	 << " in path \"" << (path ? path : "(null)")
	 << "\": " << msg << endl;
}

int debug_handler(const char *path, const char *types, lo_arg **argv,
	      int argc, void *data, void *user_data)
{
    int i;

    cerr << "Warning: unhandled OSC message in GUI:" << endl;

    for (i = 0; i < argc; ++i) {
	cerr << "arg " << i << ": type '" << types[i] << "': ";
#ifndef LMS_DEBUG_STANDALONE        
        lo_arg_pp((lo_type)types[i], argv[i]);
#endif        
	cerr << endl;
    }

    cerr << "(path is <" << path << ">)" << endl;
    return 1;
}

int configure_handler(const char *path, const char *types, lo_arg **argv,
		  int argc, void *data, void *user_data)
{
    SamplerGUI *gui = static_cast<SamplerGUI *>(user_data);
    const char *key = (const char *)&argv[0]->s;
    const char *value = (const char *)&argv[1]->s;

    if (!strcmp(key, "load")) {
	gui->setSampleFile(QString::fromLocal8Bit(value));
    } else if (!strcmp(key, DSSI_PROJECT_DIRECTORY_KEY)) {
	//gui->setProjectDirectory(QString::fromLocal8Bit(value));
    }

    return 0;
}

int rate_handler(const char *path, const char *types, lo_arg **argv,
	     int argc, void *data, void *user_data)
{
    return 0;
}

int show_handler(const char *path, const char *types, lo_arg **argv,
	     int argc, void *data, void *user_data)
{
    SamplerGUI *gui = static_cast<SamplerGUI *>(user_data);
    while (!gui->ready()) sleep(1);
    if (gui->isVisible()) gui->raise();
    else {
	QRect geometry = gui->geometry();
	QPoint p(QApplication::desktop()->width()/2 - geometry.width()/2,
		 QApplication::desktop()->height()/2 - geometry.height()/2);
	gui->move(p);
	gui->show();
    }

    return 0;
}

int hide_handler(const char *path, const char *types, lo_arg **argv,
	     int argc, void *data, void *user_data)
{
    SamplerGUI *gui = static_cast<SamplerGUI *>(user_data);
    gui->hide();
    return 0;
}

int quit_handler(const char *path, const char *types, lo_arg **argv,
	     int argc, void *data, void *user_data)
{
    SamplerGUI *gui = static_cast<SamplerGUI *>(user_data);
    gui->setHostRequestedQuit(true);
    qApp->quit();
    return 0;
}

int control_handler(const char *path, const char *types, lo_arg **argv,
		int argc, void *data, void *user_data)
{
    SamplerGUI *gui = static_cast<SamplerGUI *>(user_data);

    if (argc < 2) {
	cerr << "Error: too few arguments to control_handler" << endl;
	return 1;
    }

    const int port = argv[0]->i;
    const float value = argv[1]->f;
    /*
    switch (port) {

    }
    */
    /*The range of ports for sample pitch*/
    if((port >= LMS_SAMPLE_PITCH_PORT_RANGE_MIN) && (port < LMS_SAMPLE_PITCH_PORT_RANGE_MAX))
    {
        int f_value = port - LMS_SAMPLE_PITCH_PORT_RANGE_MIN;
        //cerr << "LMS_SAMPLE_PITCH_PORT_RANGE_MIN Port " << port << " f_value " << f_value  << endl;
        gui->m_suppressHostUpdate = TRUE;
        gui->m_sample_table->lms_mm_columns[SMP_TB_NOTE_INDEX]->controls[f_value]->lms_set_value(value);
        gui->m_suppressHostUpdate = FALSE;
    }
    else if((port >= LMS_PLAY_PITCH_LOW_PORT_RANGE_MIN) && (port < LMS_PLAY_PITCH_LOW_PORT_RANGE_MAX))
    {
        int f_value = port - LMS_PLAY_PITCH_LOW_PORT_RANGE_MIN;
        //cerr << "LMS_PLAY_PITCH_LOW_PORT_RANGE_MIN Port " << port << " f_value " << f_value  << endl;
        gui->m_suppressHostUpdate = TRUE;
        gui->m_sample_table->lms_mm_columns[SMP_TB_LOW_NOTE_INDEX]->controls[f_value]->lms_set_value(value);
        gui->m_suppressHostUpdate = FALSE;
    }
    else if((port >= LMS_PLAY_PITCH_HIGH_PORT_RANGE_MIN) && (port < LMS_PLAY_PITCH_HIGH_PORT_RANGE_MAX))
    {
        int f_value = port - LMS_PLAY_PITCH_HIGH_PORT_RANGE_MIN;
        //cerr << "LMS_PLAY_PITCH_HIGH_PORT_RANGE_MIN Port " << port << " f_value " << f_value  << endl;
        gui->m_suppressHostUpdate = TRUE;
        gui->m_sample_table->lms_mm_columns[SMP_TB_HIGH_NOTE_INDEX]->controls[f_value]->lms_set_value(value);
        gui->m_suppressHostUpdate = FALSE;
    }
    else if((port >= LMS_SAMPLE_VOLUME_PORT_RANGE_MIN ) && (port < LMS_SAMPLE_VOLUME_PORT_RANGE_MAX))
    {
        int f_value = port - LMS_SAMPLE_VOLUME_PORT_RANGE_MIN;
        //cerr << "LMS_SAMPLE_VOLUME_PORT_RANGE_MIN Port " << port << " f_value " << f_value  << endl;
        gui->m_suppressHostUpdate = TRUE;
        gui->m_sample_table->lms_mm_columns[SMP_TB_VOLUME_INDEX]->controls[f_value]->lms_set_value(value);
        gui->m_suppressHostUpdate = FALSE;
    }
    else
    {
        cerr << "Warning: received request to set nonexistent port " << port << endl;
    }

    return 0;
}

int main(int argc, char **argv)
{
    cerr << "Euphoria GUI starting..." << endl;

    QApplication application(argc, argv);
    
#ifndef LMS_DEBUG_STANDALONE    
    if (application.argc() != 5) {
	cerr << "usage: "
	     << application.argv()[0] 
	     << " <osc url>"
	     << " <plugin dllname>"
	     << " <plugin label>"
	     << " <user-friendly id>"
	     << endl;
	return 2;        
    }
#endif
    
#ifdef Q_WS_X11
    XSetErrorHandler(handle_x11_error);
#endif

#ifndef LMS_DEBUG_STANDALONE
    char *url = application.argv()[1];

    char *host = lo_url_get_hostname(url);
    char *port = lo_url_get_port(url);
    char *path = lo_url_get_path(url);

    char *label = application.argv()[3];
    bool stereo = false;
    if (QString(label).toLower() == QString(Sampler_Stereo_LABEL).toLower()) {
	stereo = true;
    }
#else
    char *url = "testing";

    char *host = "localhost";
    char *port = "10000";
    char *path = "/usr/lib/dssi/test";

    char *label = "Debug Mode - No Audio";
    bool stereo = true;    
#endif
    
    SamplerGUI gui(stereo, host, port,
		   QByteArray(path) + "/control",
		   QByteArray(path) + "/midi",
		   QByteArray(path) + "/configure",
		   QByteArray(path) + "/exiting",
		   0);
		 
    QByteArray myControlPath = QByteArray(path) + "/control";
    QByteArray myConfigurePath = QByteArray(path) + "/configure";
    QByteArray myRatePath = QByteArray(path) + "/sample-rate";
    QByteArray myShowPath = QByteArray(path) + "/show";
    QByteArray myHidePath = QByteArray(path) + "/hide";
    QByteArray myQuitPath = QByteArray(path) + "/quit";
#ifndef LMS_DEBUG_STANDALONE
    osc_server = lo_server_new(NULL, osc_error);
    lo_server_add_method(osc_server, myControlPath, "if", control_handler, &gui);
    lo_server_add_method(osc_server, myConfigurePath, "ss", configure_handler, &gui);
    lo_server_add_method(osc_server, myRatePath, "i", rate_handler, &gui);
    lo_server_add_method(osc_server, myShowPath, "", show_handler, &gui);
    lo_server_add_method(osc_server, myHidePath, "", hide_handler, &gui);
    lo_server_add_method(osc_server, myQuitPath, "", quit_handler, &gui);
    lo_server_add_method(osc_server, NULL, NULL, debug_handler, &gui);

    lo_address hostaddr = lo_address_new(host, port);
    lo_send(hostaddr,
	    QByteArray(path) + "/update",
	    "s",
	    (QByteArray(lo_server_get_url(osc_server)) + QByteArray(path+1)).data());
#endif
    QObject::connect(&application, SIGNAL(aboutToQuit()), &gui, SLOT(aboutToQuit()));

    gui.setReady(true);
#ifdef LMS_DEBUG_STANDALONE
    gui.show();
#endif
    return application.exec();
}

